{"version":3,"sources":["components/asteroid.jsx","components/embed.jsx","components/image.jsx","components/navbar.jsx","components/outro.jsx","App.js","serviceWorker.js","index.js"],"names":["NearEarthObject","name","lastSeen","maxDiameter","minDiameter","dangerous","className","id","Math","round","YoutubeEmbed","url","width","height","src","frameBorder","allow","allowFullScreen","title","imageDay","state","data","a","fetch","response","json","this","setState","media_type","alt","date","copyright","React","Component","NavBar","href","outro","App","useState","asteroids","setAsteroids","useEffect","getAsteroids","near_earth_objects","map","key","designation","orbital_data","last_observation_date","estimated_diameter","meters","estimated_diameter_max","estimated_diameter_min","is_potentially_hazardous_asteroid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5d0aad8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./css/asteroid.css\";\n\nconst NearEarthObject = ({\n  name,\n  lastSeen,\n  maxDiameter,\n  minDiameter,\n  dangerous,\n}) => {\n  return (\n    <div className=\"card\" id=\"idAsteroid\">\n      <h1 className=\"title\">{name}</h1>\n      <p className=\"neo\">\n        Date the Asteroid was Last Seen:\n        <br />\n        <span className=\"date\">{lastSeen}</span>\n      </p>\n      <p className=\"neo\">\n        Diameter in meters, between:\n        <br />\n        <span className=\"diam\">{Math.round(maxDiameter)}m</span> &{\" \"}\n        <span className=\"diam\">{Math.round(minDiameter)}m</span>\n      </p>\n      <p className=\"neo\">Fairly harmless Boy {dangerous}</p>\n    </div>\n  );\n};\n\nexport default NearEarthObject;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst YoutubeEmbed = ({ url }) => (\n  <div className=\"video-responsive\">\n    <iframe\n      width=\"853\"\n      height=\"480\"\n      src={`${url}`}\n      frameBorder=\"0\"\n      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n      allowFullScreen\n      title=\"Embedded youtube\"\n    />\n  </div>\n);\n\nYoutubeEmbed.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nexport default YoutubeEmbed;\n","import React from \"react\";\nimport \"./css/image.css\";\nimport Embed from \"./embed\";\n\nclass imageDay extends React.Component {\n  state = {\n    data: null,\n  };\n\n  async componentDidMount() {\n    const url =\n      \"https://api.nasa.gov/planetary/apod?api_key=bjuVUgfTLhIEoL8tiVwkom7V20gV7fquf0cNagKg\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({ data: data });\n  }\n\n  render() {\n    return (\n      <>\n        {!this.state.data ? (\n          <div className=\"loading\">\n            <div className=\"container\">\n              <p className=\"head-er\">castynet@user-PC MINGW64 ~</p>\n              <p className=\"One\">$ Contacting the NASA ISS Server...</p>\n              <p className=\"Two\">$ Redirected to Area 51 US-G6 Database!</p>\n              <p className=\"Three\">$ Establishing connection to Area 51...</p>\n              <p className=\"Four\">| Success!</p>\n              <p className=\"Five\">$ Recieving Data...</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            <div className=\"imageCard\">\n              {this.state.data.media_type === \"video\" ? (\n                <Embed url={this.state.data.url} />\n              ) : (\n                <img\n                  src={this.state.data.url}\n                  alt=\"NASA's pic of the day\"\n                />\n              )}\n            </div>\n\n            <div className=\"detailsCard\">\n              <h1 className=\"title\">\n                {this.state.data.media_type === \"video\" ? \"VIDEO \" : \"IMAGE \"}\n                OF THE DAY:&nbsp;\n                {this.state.data.title}\n              </h1>\n              <p>\n                <br />\n                NASA's{\" \"}\n                {this.state.data.media_type === \"video\" ? \"video \" : \"image \"}of\n                the day: {this.state.data.date}\n              </p>\n              {!this.state.data.copyright ? (\n                <p>&copy; by Nasa</p>\n              ) : (\n                <p>&copy; by {this.state.data.copyright}</p>\n              )}\n              <p>\n                <br />\n                Below is a catalogue of asteroids from NASA and their reference\n                codes(i.e their names)\n              </p>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default imageDay;\n","import React from \"react\";\nimport \"./css/navbar.css\";\n\nconst NavBar = () => {\n  return (\n    <>\n      <nav className=\"navbar visible-md visible-lg topnavbar menu menu--ama\">\n        <div className=\"centered\">\n          <a className=\" stlist\" href=\"https://castynet.africa\">\n            Castynet\n          </a>\n          <a className=\"stlist\" href=\"#idAsteroid\">\n            Asteroids\n          </a>\n          <a className=\" stlist\" href=\"#idAbout\">\n            About\n          </a>\n          <a\n            className=\" stlist\"\n            href=\"https://www.castynet.co.ke/#sectionContact\"\n          >\n            Contact\n          </a>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./css/outro.css\";\n\nconst outro = () => {\n  return (\n    <>\n      <div className=\"footer\" id=\"idAbout\">\n        <div className=\"About\">\n          <h1 className=\"headingAbout\">About</h1>\n          <p className=\"footerContent\">\n            The site displays data collected by NASA, the NASA Image of the Day\n            and some recent Near Earth Objects. It's real-time data obtained\n            through their open APIs. The site is built using ReactJS and hosted\n            on Deep Web Africa (the hosting keeps changing, but the site is\n            always somewhere, in a data center, safe:) The project is open\n            source and availabe on GitHub. All images are copyright of their\n            respective owners. See blog post on <u>blog.genZtech.xyz</u> for\n            more details on the project.\n            <br />\n            Created by Riunge Maina for Castynet.\n          </p>\n        </div>\n        <div className=\"Products\">\n          <h1 className=\"headingAbout\">Links</h1>\n          <ul className=\"footerContent\">\n            <li>\n              <a href=\"https://www.instagram.com/castynet_/?hl=en\">\n                @castynet instagram\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.twitter.com/thebrownpirate\">Twitter</a>\n            </li>\n            <li>\n              <a href=\"mailto:riungemaina@gmail.com\">Contact the Developer</a>\n            </li>\n            <li>\n              <a href=\"https://github.com/castynet/react-nasa\">\n                project files, GitHub\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.nukesafaris.co.ke/\">NukeSafaris</a>\n            </li>\n            <li>\n              <a href=\"https://www.riungemaina.xyz\">\n                Portfolio: I'm looking for a good job :)\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"copyright\">\n        <p>\n          copyright <span className=\"andCopy\">©</span> 2021 Castynet all rights\n          reserved.\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default outro;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Asteroids from \"./components/asteroid\";\nimport ImageoftheDay from \"./components/image\";\nimport NavBar from \"./components/navbar\";\nimport Outro from \"./components/outro\";\n\nconst App = () => {\n  const [asteroids, setAsteroids] = useState([]);\n\n  useEffect(() => {\n    getAsteroids();\n  }, []);\n\n  const getAsteroids = async () => {\n    const response = await fetch(\n      \"https://www.neowsapp.com/rest/v1/neo/browse?page=1920&size=12&api_key=bjuVUgfTLhIEoL8tiVwkom7V20gV7fquf0cNagKg\"\n    );\n    const data = await response.json();\n    setAsteroids(data.near_earth_objects);\n    //console.log(data.near_earth_objects);\n  };\n\n  return (\n    <>\n      <NavBar />\n      <div className=\"page\">\n        <ImageoftheDay />\n      </div>\n      <div className=\"page\">\n        {asteroids.map((NearEarthObject) => (\n          <Asteroids\n            key={NearEarthObject.id}\n            name={NearEarthObject.designation}\n            lastSeen={NearEarthObject.orbital_data.last_observation_date}\n            maxDiameter={\n              NearEarthObject.estimated_diameter.meters.estimated_diameter_max\n            }\n            minDiameter={\n              NearEarthObject.estimated_diameter.meters.estimated_diameter_min\n            }\n            dangerous={NearEarthObject.is_potentially_hazardous_asteroid}\n          />\n        ))}\n      </div>\n      <Outro />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n//Run Offline\nserviceWorker.unregister();\n"],"sourceRoot":""}